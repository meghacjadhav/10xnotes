//Time complexity -> It is basically execution time required for our program / code in terms of size of input.

//O(n)


//You are given one array and one element.You have to find if there exist any two elements so that the sum
//of those two elements is equal to given element.

let arr = [3, 6, 8, 10, 11, 32, 21, 43];
let givenValue = 53;
let givenValue = 1000;
32 + 21 = 53;



//[3, 6, 8, 10, 11, 32, 21, 43];

//1st element -> 32
//2nd element -> any number from 21, 43


//Algorithm steps
//1. Iterate for the first element in the array.
//2. for each element in the array find if there exist other element in the right of it so that total sum will be
//equal to given value
//if we find the second element than return true, otherwise false


function findTwoElements(arr, givenValue) {
    for (let i = 0; i < arr.length; ++i) {
        //firstElement -> arr[i];
        for (let j = i+1; j < arr.length; ++j) {
            //secondElement -> arr[j]
            if (arr[i] + arr[j] == givenValue) {
                console.log(i, j);
                return true;
            }
        }
    }
    return false;
}

let arr = [3, 6, 8, 10, 11, 32, 21, 43];
let givenValue = 51;

console.log(findTwoElements(arr, givenValue))

//time complexity -> o(n2)
//size of array is N
//TimeComplexity -> (N - 1) + (N - 2) + (N - 3) + (N - 4) + ....+ 1
//M(M + 1) / 2
//M = N - 1
//    (N - 1)(N - 1 + 1) / 2
//    (N2 - N / 2)
//O(N2)


//array is sorted. (array elements are either in increaseing order)

//26
//[1, 5, 7, 9, 11, 17, 23]

//9, 17 = 24



//Two pointer algorithm -> basically finds if there exist any two elmeents in array whose sum is equal to given value
//in O(n) time.

//    Steps
//1. Take two pointers, one starting from first, and second starting from right
//2. if the sum of two elements
//    is equal to given value -> return true
//    greater than given value -> moving second pointer to left.
//    smaller than given value -> moving first pointer to right.

let arr = [1, 5, 7, 9, 11, 17, 23];
let left = 0, right = arr.length - 1;
let givenValue = 26;

//arr[left] = 9
//arr[right] = 17
//givenValue

while (left < right) {
    //arr[left], arr[right]
    //console.log(left, right);

    if (arr[left] + arr[right] == givenValue) {
        console.log("true");
        break;
    } else if (arr[left] + arr[right] > givenValue) {
        --right;
    } else if (arr[left] + arr[right] < givenValue) {
        ++left;
    }

    if (left == right) {
        break;
    }
}
if (left == right) {
    console.log("false");
}


//[1, 3, 5, 5, 5, 6]
//time coplexity = O(n)
