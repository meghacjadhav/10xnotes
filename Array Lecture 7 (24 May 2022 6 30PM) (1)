//MultiDimensional Array


//2D array => Array of arrays


//1d(dimensional) array

let arr = [1, 2, 3];

arr[i]


//2d array
//1. Create 2d Array
let arr = [];
arr.push([1, 2, 3])
arr.push([4, 5, 6]);


let arr2 = [[10, 20, 30], [40, 50, 60]]


arr3[0] = [13, 15, 14, 15];
arr3[1] = [34, 54, 89];


console.log(arr)
console.log(arr2)
console.log(arr3)

console.log(arr[0])
console.log(arr2[0])
console.log(arr3[0])


//How to access/update the elements of 2d array
let arr = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]];

console.log(arr[1][2])

let arr2 = [
    [1, 2, 3, "some string", [4, 5, 6]],
    [
        9,
        10,
        [
            1,
            2,
            3,
            ["dfsjfa", 9, 10]
        ]
    ]
]

console.log(arr2)
console.log(arr2[1])
console.log(arr2[1][2])
console.log(arr2[1][2][3])
console.log(arr2[1][2][3][1])


//arr2[1][2][3][1]


//How to update the element
//arr[i] = <update_value>


arr2[1][2][3][1] = "some random string"
console.log(arr2[1][2][3][1])
console.log(arr2[1][2])

//what is an matrix -> it is table which will have rows and columns.

let matrix = [
    [5, 4, 3, 2, 1, 2, 3],
    [10, 9, 4, 5, 6, 7, 8]
]

console.log(matrix[0][1])

//get the element at 1st row and 3rd column
//matrix[row-1][column-1]

////Iteration of the 2d array
//Question: You are given an  array in which each element in itself is an arrya and it contains marks of students in all
//subjects.get the sum of marks of all student and return this result in an Array


let marksStudent = [[30, 40, 40, 90], [40, 90, 20, 100], [30, 50, 60, 30]]


//to iterate 2d array -> you need to have index -> you will need two loops

let output = []
for (let i = 0; i < marksStudent.length; ++i) {
    let sum =0
    for (let j = 0; j < marksStudent[i].length; ++j) {
        sum += marksStudent[i][j];
    }
    console.log(sum)
    output.push(sum);
}
console.log(sum)

let input = [[30, 40, 40, 90], [40, 90, 20, 100], [30, 50, 60, 30]]
let output = [200, 250, 170]

let arr = [30, 40, 40, 90] ;

console.log(arr.reduce((total, currentEle) => total + currentEle))

console.log(input.map(subMark => subMark.reduce((prevOutput, currentEle) => prevOutput + currentEle)))

input.map(subMark => subMark.reduce((total, currentEle) => total + currentEle))

//time compl: O(n2)